#INSTALLING
%pip -q install pycaret skimpy numpy pydotplus graphviz

# preparing

import seaborn as sns
import pandas as pd
import numpy as np
import skimpy as sk 
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, MinMaxScaler, OrdinalEncoder, StandardScaler
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, train_test_split 
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_score, recall_score, f1_score, roc_auc_score, mean_absolute_error, mean_squared_error, r2_score
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.impute import KNNImputer, SimpleImputer
from sklearn.feature_selection import SelectKBest,chi2
from sklearn.ensemble import RandomForestClassifier
from sklearn.decomposition import PCA
from sklearn.compose import ColumnTransformer
from pycaret.classification import *

pd.set_option('display.float_format', lambda x: '%.2f' % x)
pd.set_option('display.max_columns', None); 


#loading data
df=pd.read_csv('')
df.head()

# ANALYS DATA
sk.skim(df)
df.hist()

# CHECKING DATA TYPE AND UNIQUE VALUES / COLUMN
print(df.info())
df.T.apply(lambda x: x.unique(), axis=1)

#CHECKING NULL VALUES
df.isnull().sum()

# removing unwanted spaces from column names
df.columns = df.columns.str.strip().str.replace('\xa0', ' ').str.replace('\u200b', '')
df.columns = df.columns.str.translate(str.maketrans('', '', '\t\n\r\x0b\x0c'))
df.columns = df.columns.str.replace(r'\s+', '')
df.columns

# DROP columns
df = df.drop(['deck'], axis=1)

# PAIR PLOT SIMPLE
sns.pairplot(df);
# PAIR PLOT DETAIL
sns.pairplot(df, hue='columnname?', diag_kind='kde', palette='viridis')

### CORRELATION PLOT
plt.figure(figsize=(15,8))
plt.title("Heatmap showing Correlation between all the features", fontsize=20)
sns.heatmap(df.corr(),annot = True, cmap='coolwarm')

# VIEW ITEM COUNTS / COLUMN
for col in df.columns:
    print(f"====={col}======")
    print(df[col].value_counts())
    print("*******************")


# Impute missing values using simple (NUM)
imputer = SimpleImputer(strategy='mean')
df['standard_d_1'] = imputer.fit_transform(df['standard_d_1'])
df['skewness_o_1'] = imputer.fit_transform(df['skewness_o_1'])
df['excess_kur'] = imputer.fit_transform(df['excess_kur'])

# Use Onehot for categorical variables(ABC)
le = OneHotEncoder(handle_unknown='ignore')
df[] = le.fit_transform(df[])
df[] = le.fit_transform(df[])
df[] = le.fit_transform(df[])

# Impute missing values using simple (CAT)
cols = df.columns
df[cols[2]].fillna(df[cols[2]].median(),inplace=True) # df.info COLUMN 2
df[cols[5]].fillna(df[cols[5]].median(),inplace=True) # df.info COLUMN 5
df[cols[2]].fillna(df[cols[-2]].median(),inplace=True) # df.info COLUMN 7

df.dropna(inplace=True)

# MISSING DATA HEATMAP 
plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cbar=True, cmap='viridis')
plt.title("Missing Data Heatmap")
plt.show()


######################################################################
# shortening column names 
df.columns = [col.strip() for col in df.columns]
df.columns.fillna(0)
df.replace({'NaN': None}, inplace=True)

import re

 def shorten_column_name(name, existing_names):
    # Remove punctuation and convert to lowercase
    name = re.sub(r'[^\w\s]', '', name).lower()
    # Replace spaces with underscores
    name = name.replace(' ', '_')
    # Truncate to 10 characters
    name = name[:10]
    
    # Check if the shortened name already exists
    if name in existing_names:
        # Append a unique suffix
        suffix = 1
        while f"{name}_{suffix}" in existing_names:
            suffix += 1
        name = f"{name}_{suffix}"
    
    existing_names.add(name)
    
    return name

# Get the existing column names
existing_names = set()

# Store the old and new column names
old_columns = df.columns
new_columns = [shorten_column_name(name, existing_names) for name in old_columns]

# Rename the columns
df.rename(columns=dict(zip(old_columns, new_columns)), inplace=True)

# Print the list of old and new column names
print("Old column names:")
print(old_columns)
print("New column names:")
print(new_columns)
######################################################################

# take input from user and predict
# your values
age = 41
experience = 16

# Print the predicted income
# Use your trained model to predict income
input_values = np.array([[age, experience]])
predicted_income = l_reg.predict(input_values)
print("Predicted income>>", predicted_income)
